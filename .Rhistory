install.packages("faraway")
library("faraway")
data("newhamp")
help("newhamp")
clinton
newhamp[clinton]
install.packages("faraway")
library("faraway")
data("newhamp")
help("newhamp")
newhamp[clinton]
#Andrew Celli - PS3
install.packages("faraway")
install.packages("faraway")
#Andrew Celli - PS3
install.packages("faraway")
#Andrew Celli - PS3
install.packages("faraway")
install.packages("faraway")
library("faraway")
data("newhamp")
par(mfrow=c(1,1))
x = seq(-4,4,.1)
plot(x, dnormx, type="l", lty=2, xlab="x value")
dnormx = dnorm(x)
plot(x, dnormx, type="l", lty=2, xlab="x value")
dt1 = dt(x, 1)
lines(x, dt1)
plot(x, dnormx, col = "red", lty=2, xlab="x value")
plot(x, dnormx, col = "red", lty=1, xlab="x value")
plot(x, dnormx, col = "red", lty=3, xlab="x value")
plot(x, dnormx, col = "red", xlab="x value")
dev.off
plot(x, dnormx, col = "red", xlab="x value")
lines(x, dt1)
lines(x, dnormx)
plot(xlab="x value")
plot(xlab="x value", xl)
plot(xlab="x value", cex = 1, ylim = c(0,.455))
plot(x, xlab="x value", cex = 1, ylim = c(0,.455))
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.455))
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.455))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.455))
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.455), xlim = (-4,4))
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.455), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
dt3 = dt(x, 3)
dt20 = dt(x, 20)
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.4), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.38), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
title(main = "t Distribution with varying Degrees of Freedom (df)", xlab = "Occurence value; N = 100")
legend("topright", inset=0, c("df of 1 - red","df of 3 - blue","df of 20 - black"), cex=.95)
legend("topright", inset=0, c("normal - black", "df of 1 - blue","df of 3 - green","df of 20 - red"), cex=.95)
set.seed(20)
par(mfrow=c(1,1))
x = seq(-4,4,.1)
dnormx = dnorm(x)
dev.off
dt1 = dt(x, 1)
dt3 = dt(x, 3)
dt20 = dt(x, 20)
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.38), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
title(main = "t Distribution with varying Degrees of Freedom (df)", xlab = "Occurence value; N = 100")
legend("topright", inset=0, c("normal - black", "df of 1 - blue","df of 3 - green","df of 20 - red"), cex=.95)
plot(pObamaH,pDeanH)
pDeanH = NewHampH["Dean"]
pObamaH = NewHampH["pObama"]
pDeanD = NewHampD["Dean"]
pObamaD = NewHampD["pObama"]
plot(pObamaH,pDeanH)
library("faraway")
data("newhamp")
NewHampH = newhamp[newhamp$votesys == "H",]
NewHampD = newhamp[newhamp$votesys == "D",]
pDeanH = NewHampH["Dean"]
pObamaH = NewHampH["pObama"]
pDeanD = NewHampD["Dean"]
pObamaD = NewHampD["pObama"]
par(mfrow=c(2,2))
par(mfrow=c(1,1))
plot(pObamaH,pDeanH)
plot(x= pObamaH,y=pDeanH)
pDeanH = NewHampH["Dean"]
pObamaH = NewHampH["pObama"]
plot(x= pObamaH,y=pDeanH)
plot(x= pObamaH)
View(pDeanH)
pDeanH = NewHampH["Dean"$Deen]
pDeanH = NewHampH["Dean"$Dean]
par(mfrow=c(1,1))
plot(x= pObamaH)
plot(x= pObamaH, y = pDeenH)
plot(x= pObamaH, y = pDeanH)
pDeanH1 = NewHampH["Dean"]
plot(x= pObamaH, y = pDeanH1)
pDeanH = NewHampH["Dean"]
plot(x= pObamaH, y = pDeanH)
plot(x= pObamaD, y = pDeanD)
c(pDeanH,pObamaH)
hi =c(pDeanH,pObamaH)
plot(hi)
View(hi)
View(hi)
hi =c(pObamaH)
plot(hi)
# PROBLEM 2 --------------------------------------------------
set.seed(20)
plot(x=hi)
pDeanH = list(NewHampH["Dean"])
View(pDeanH)
pDeanH = list(NewHampH["Dean"])
View(pDeanH)
pDeanH = NewHampH["Dean"]
plot(pObamaH)
plot(pDeanD,pObamaD)
plot(x = pDeanD,y = pObamaD)
install.packages("faraway")
install.packages("faraway")
library("faraway")
data("newhamp")
help("newhamp")
boxplot(newhamp)
boxplot(newhamp$Obama, newhamp$Dean, xlab="Dean/Obama")
boxplot(newhamp$Obama, newhamp$Dean, xlab="Dean/Obama")
boxplot(newhamp)
plot(newhamp$Obama, newhamp$Dean, xlab="Dean/Obama")
plot(x = pDeanD,y = pObamaD)
plot(NewHampH)
NewHampH$Obama
plot(NewHampH$Obama)
plot(NewHampH$Obama, NewHampH$Dean)
NewHampH$Dean
plot(NewHampH$pObama, NewHampH$Dean)
plot(NewHampH$pObama, NewHampH$Dean, main = "Proportion of votes in handcounted counties")
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in handcounted counties")
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in Machine counties", add = TRUE)
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in Machine counties", add1)
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in Machine counties", add1 = TRUE)
plot(NewHampH$pObama, NewHampH$Dean, main = "Proportion of votes in handcounted counties")
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in Machine counties", add1 = TRUE)
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in machine-counted counties")
plot(NewHampH$pObama, NewHampH$Dean, main = "Proportion of votes in hand-counted counties",ylab = "DEAN")
plot(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
plot(NewHampH$pObama, NewHampH$Dean, main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
add(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
plot(NewHampH$pObama, NewHampH$Dean, main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
plot(NewHampH$pObama, NewHampH$Dean, col = "blue", main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.95)
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.65)
install.packages("faraway")
library("faraway")
data("newhamp")
NewHampH = newhamp[newhamp$votesys == "H",]
NewHampD = newhamp[newhamp$votesys == "D",]
plot(NewHampH$pObama, NewHampH$Dean, col = "blue", main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.65)
install.packages("faraway")
NewHampH = newhamp[newhamp$votesys == "H",]
NewHampD = newhamp[newhamp$votesys == "D",]
plot(NewHampH$pObama, NewHampH$Dean, col = "blue", main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.65)
plot(NewHampH$pObama, NewHampH$Dean, col = "blue", main = "Proportion of votes in counties with different election systems",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.65)
title(main = "t Distribution with varying Degrees of Freedom (df)", xlab = "Occurence value; N = 100")
legend("topright", inset=0, c("normal - black", "df of 1 - blue","df of 3 - green","df of 20 - red"), cex=.95)
NewHampH = newhamp[newhamp$votesys == "H",]
NewHampD = newhamp[newhamp$votesys == "D",]
plot(NewHampH$pObama, NewHampH$Dean, col = "blue", main = "Proportion of votes in hand-counted counties",ylab = "DEAN",xlab = "OBAMA")
points(NewHampD$pObama, NewHampD$Dean, col="red", main = "Proportion of votes in machine-counted counties",ylab = "DEAN", xlab = "OBAMA")
legend("topright", inset=0, c("Hand-counted - Blue", "Machine-counted - Red"), cex=.65)
# PROBLEM 4 --------------------------------------------------
SELib = 1.2/sqrt(16)
TscoreLib = (9.5-10)/SELib #EQUALS -1.666667
pt(-1.666667, df = 15, lower.tail = TRUE, log.p = FALSE)
pnorm(-1.666667, lower.tail = TRUE)#0.04779032
pt(-MenWomenTScore, df = 26)*2
# PROBLEM 7 --------------------------------------------------
WomenSE = 2.34/sqrt(11)
MenSE = 2.22/sqrt(16)
SEMenWomen = sqrt(WomenSE^2+MenSE^2)#Equals 0.8976674
MenWomenTScore = (2.99-2.86)/SEMenWomen #Equals 0.1448198
MenWomenTScore
pt(-MenWomenTScore, df = 26)*2
MenWomenTScore
pt(-MenWomenTScore, df = 26)*2
WomenSE
MenSE
SEMenWomen = sqrt(WomenSE+MenSE)#Equals 0.8976674
SEMenWomen
SEMenWomen
SEMenWomen = sqrt((2.34^2/sqrt(11))#Equals 0.8976674
SEMenWomen = sqrt((2.34^2/sqrt(11)+2.22^2/sqrt(16))#Equals 0.8976674
# PROBLEM 7 --------------------------------------------------
SEMenWomen = sqrt((2.34^2/sqrt(11))+(2.22^2/sqrt(16))#Equals 0.8976674
# PROBLEM 7 --------------------------------------------------
SEMenWomen = sqrt((2.34^2/sqrt(11))+(2.22^2/sqrt(16))#Equals 0.8976674
# PROBLEM 7 --------------------------------------------------
SEMenWomen = sqrt((2.34^2/sqrt(11))+(2.22^2/sqrt(16)))#Equals 0.8976674
SEMenWomen
SEMenWomen
pnorm(-TvZ)*2
pnorm(-TvZ)*2
# PROBLEM 7 --------------------------------------------------
TVSe = sqrt(0.070^2+.075^2) #EQUALS 0.1025914
TVSe
TvZ = (2.99-2.86)/TVSe #EQUALS 1.2671
pnorm(-TvZ)*2
TvConInt = (2.86-1.2671*(1.2671))
pnorm(0, mean = 2.99, sd = 2.34)#EQUALS .10, so more than the .025
# PROBLEM 7 --------------------------------------------------
WomenSE = 2.34/sqrt(11)
TvConInt = (2.86-1.2671*(1.2671))
pnorm(0, mean = 2.99, sd = 2.34)#EQUALS .10, so more than the .025
TvConInt
TvConIntLow = (2.86-1.96*(TVSe))
TvConIntLow
pnorm(0, mean = 2.99, sd = 2.34)#EQUALS .10, so more than the .025
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(11-1)*2.34+(16-1)*2.22
/
(11+16-2)
)
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(11-1)*2.34+(16-1)*2.22
/
(11+16-2)
)
SESmallSample = SDSmallSample * sqrt((1/11)+(1/16))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(111-1)*2.34+(116-1)*2.22
/
(111+116-2)
)
SESmallSample = SDSmallSample * sqrt((1/11)+(1/16))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
SESmallSample = SDSmallSample * sqrt((1/111)+(1/116))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(1111-1)*2.34+(1161-1)*2.22
/
(1111+1161-2)
)
SESmallSample = SDSmallSample * sqrt((1/1111)+(1/1116))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
((11-1)*2.34+(16-1)*2.22)
/
(11+16-2)
)
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
((11-1)*2.34+(16-1)*2.22)
/
(11+16-2)
)
SESmallSample = SDSmallSample * sqrt((1/11)+(1/16))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
((111-1)*2.34+(161-1)*2.22)
/
(111+161-2)
)
SESmallSample = SDSmallSample * sqrt((1/111)+(1/161))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
((11-1)*2.34+(16-1)*2.22)
/
(11+16-2)
)
SESmallSample = SDSmallSample * sqrt((1/11)+(1/16))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.2050972
TSmall
pt(-TSmall, df = 25)*2 #0.2050972
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(((11-1)*2.34)+((16-1)*2.22))
/
(11+16-2)
)
SESmallSample = SDSmallSample * sqrt((1/11)+(1/16))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.8273556
SESmallSample = SDSmallSample * sqrt(((1/11)+(1/16)))
# PROBLEM 8 --------------------------------------------------
SDSmallSample = sqrt(
(((11-1)*2.34)+((16-1)*2.22))
/
(11+16-2)
)
SESmallSample = SDSmallSample * sqrt(((1/11)+(1/16)))
TSmall = (2.99-2.86)/SESmallSample #EQUALS
pt(-TSmall, df = 25)*2 #0.8273556
TSmall
x = seq(-4,4,.1)
dnormx = dnorm(x)
dev.off
dt1 = dt(x, 1)
dt3 = dt(x, 3)
dt20 = dt(x, 20)
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.38), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
title(main = "t Distribution with varying Degrees of Freedom (df)", xlab = "Occurence value; N = 100")
legend("topright", inset=0, c("normal - black", "df of 1 - blue","df of 3 - green","df of 20 - red"), cex=.95)
x = seq(-4,4,.1)
dnormx = dnorm(x)
dev.off
dt1 = dt(x, 1)
dt3 = dt(x, 3)
dt20 = dt(x, 20)
plot(x, col = "white", xlab="x value", cex = 1, ylim = c(0,.38), xlim = c(-4,4))
lines(x, dnormx, col = "black")
lines(x, dt1, col = "blue")
lines(x, dt3, col = "green")
lines(x, dt20, col = "red")
title(main = "t Distribution with varying Degrees of Freedom (df)", xlab = "Occurence value; N = 100")
?pf
load(url("https://github.com/wieglerjef/QPMspring2019/blob/master/data/disasterData.Rdata?raw=true"))
load(url("https://github.com/wieglerjef/QPMspring2019/blob/master/data/disasterData.Rdata?raw=true/"))
library("faraway")
data("star")
help(star)
library("faraway")
data("star")
help(star)
library("faraway")
data("star")
help(star)
colnames(star)
star
# For an illustrative purpose, we drop two observations
star <- star[-c(11,20),]
star
## Goals:
## 1. Regression diagnostics
getwd()
## Goals:
## 1. Regression diagnostics
getwd("/Users/andrewcelli/Documents")
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/")
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/Documents/")
getwd
getwd()
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/Documents/GitHub/QPMspring2019/")
getwd()
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/Documents/GitHub/QPMspring2019/")
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/Documednts/GitHub/QPMspring2019/")
getwd()
## Goals:
## 1. Regression diagnostics
setwd("/Users/andrewcelli/Documents/GitHub/QPMspring2019/")
getwd()
# The data look like this
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n")
text(star$temp, star$light, labels=star$index)
# The data look like this
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity")
text(star$temp, star$light, labels=star$index)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Estimated line
abline(model1, col="firebrick2", lwd=2)
# Estimated line
abline(model1, col="firebrick44", lwd=2)
# Estimated line
abline(model1, col="firebrick4", lwd=2)
col="firebrick4"
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
abline(h=0)
col="firebrick4"
# Estimated line
abline(model1, col="firebrick4", lwd=2)
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
abline(h=0)
abline(h=0, col)
abline(h=0, col = col)
library("car") # a package with lots of diagnostic tools
install.packages("car")
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
library("car") # a package with lots of diagnostic tools
install.packages("car")
library("car") # a package with lots of diagnostic tools
install.packages("car")
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
library("car") # a package with lots of diagnostic tools
source('~/Documents/GitHub/QPMspring2019/labs/lab14/lab14.R', echo=TRUE)
install.packages("car")
library("car") # a package with lots of diagnostic tools
install.packages("rlang")
library("car") # a package with lots of diagnostic tools
install.packages("car")
install.packages("car")
install.packages("rlang")
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
# Outliers
outlierTest(model1)
text(c(28,32), cooks.dist[c(28,32)], labels=c(28,32))
# Influential observations
influencePlot(model1,
sub="Circle size is proportial to Cook's Distance")
# What if we drop 28 and 32?
model2 <- lm(light ~ temp, data=star[-c(28,32),])
summary(model2)
# What if we drop 28 and 32?
model2 <- lm(light ~ temp, data=star[-c(28,32),])
summary(model2)
# Use absolute residuals
plot(abs(residuals(model1)) ~ fitted(model1), data=star)
abline(h=0)
install.packages("car")
install.packages("car")
# Outliers
outlierTest(model1)
# Cook's distance and influential observations
cooks.dist <- cooks.distance(model1)
plot(cooks.dist)
text(c(28,32), cooks.dist[c(28,32)], labels=c(28,32))
# Influential observations
influencePlot(model1,
sub="Circle size is proportial to Cook's Distance")
# What if we drop 28 and 32?
model2 <- lm(light ~ temp, data=star[-c(28,32),])
summary(model2)
# Let's compare Models 1 and 2
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n") # type="n" does not plot anything
text(star$temp, star$light, labels=star$index)
# Model 1
abline(model1, col="firebrick1", lwd=2)
# Model 2 (without 28 and 32)
abline(model2, col="maroon1", lwd=2)
# What if we include a dummy variable for 28 and 32?
star$outliers <- 0
# Let's compare Models 1 and 2
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n") # type="n" does not plot anything
text(star$temp, star$light, labels=star$index)
# Model 1
abline(model1, col="firebrick1", lwd=2)
# Model 2 (without 28 and 32)
abline(model2, col="maroon1", lwd=2)
